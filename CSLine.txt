#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
#include<dos.h>

typedef struct coordinate
{
	int x,y;
	char code[4];
}PT;

void drawwindow();
void drawline(PT p1,PT p2);
PT setcode(PT p);
int visibility(PT p1,PT p2);
PT resetendpt(PT p1,PT p2);

void main()
{
	int gd=DETECT,v,gm;
	PT p1,p2,p3,p4,ptemp;
	printf("\n 200 200 and 300 300 is window boundary");
	printf("\nEnter x1 and y1\n");
	scanf("%d %d",&p1.x,&p1.y);
	printf("\nEnter x2 and y2\n");
	scanf("%d %d",&p2.x,&p2.y);

	initgraph(&gd,&gm,"c:\\tc\\bgi");
	printf("\n Before Clipping");
	drawwindow();
	drawline(p1,p2);
	getch();
	cleardevice();

	delay(500);
	p1=setcode(p1);
	p2=setcode(p2);
	v=visibility(p1,p2);
	delay(500);

	switch(v)
	{
	case 0:	printf("\n After Clipping"); // fully visible
		drawwindow();
			delay(500);
			drawline(p1,p2);
			break;
	case 1:printf("\n After Clipping");   //invisible
	drawwindow();
			delay(500);
			break;
	case 2:printf("\n After Clipping");  // clipping case
		p3=resetendpt(p1,p2);//calculate intersection point regarding p1
		p4=resetendpt(p2,p1);//calculate intersection point regarding p2
		      //printf("p3.x=%d    p4.x=%d",p3.x,p4.x);
			drawwindow();
			delay(500);
			drawline(p3,p4);
			break;
	}

	getch();
	closegraph();
}

void drawwindow()
{
	line(200,200,300,200);
	line(300,200,300,300);
	line(300,300,200,300);
	line(200,300,200,200);
}

void drawline(PT p1,PT p2)
{
	line(p1.x,p1.y,p2.x,p2.y);
}

PT setcode(PT p)	//for setting the 4 bit code
{
	PT ptemp;

	if(p.y<200)
		ptemp.code[0]='1';	//Top
	else
		ptemp.code[0]='0';

	if(p.y>300)
		ptemp.code[1]='1';	//Bottom
	else
		ptemp.code[1]='0';

	if(p.x>300)
		ptemp.code[2]='1';	//Right
	else
		ptemp.code[2]='0';

	if(p.x<200)
		ptemp.code[3]='1';	//Left
	else
		ptemp.code[3]='0';

	ptemp.x=p.x;
	ptemp.y=p.y;

	return(ptemp);
}

int visibility(PT p1,PT p2)
{
	int i,flag=0;

	for(i=0;i<4;i++)
	{
		if((p1.code[i]!='0') || (p2.code[i]!='0'))//both code=0000 so visible
			flag=1;
	}

	if(flag==0)
		return(0); //visible

	for(i=0;i<4;i++)
	{
		if((p1.code[i]==p2.code[i]) && (p1.code[i]=='1')) //line is invisible
			flag=0;
	}

	if(flag==0)
		return(1);//invisible

	return(2);      //clipping case
}

PT resetendpt(PT p1,PT p2)
{
	PT temp;
	int x,y,i;
	float m,k;
	//set x value
	if(p1.code[3]=='1')            //intersect at left
		x=200;

	if(p1.code[2]=='1')           //intersect at right
		x=300;

		//calculate y value
	if((p1.code[3]=='1') || (p1.code[2]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		printf("m=%f  ",m);
		k=(p1.y+(m*(x-p1.x)));
		temp.y=k; //calculate y
		temp.x=x;
		printf("\n intersection point x=%d  y=%d",temp.x,temp.y);
		for(i=0;i<4;i++)
			temp.code[i]=p1.code[i];

		if(temp.y<=300 && temp.y>=200)
			return (temp);
	}
	//set y value
	if(p1.code[0]=='1')            //intersect top boundary
		y=200;

	if(p1.code[1]=='1')            //intersect at bottom
		y=300;
	//calculate x value
	if((p1.code[0]=='1') || (p1.code[1]=='1'))
	{
		m=(float)(p2.y-p1.y)/(p2.x-p1.x);
		k=(float)p1.x+(float)(y-p1.y)/m;
		temp.x=k; //calculate x
		temp.y=y;

		for(i=0;i<4;i++)
			temp.code[i]=p1.code[i];

		return(temp);
	}
	else
		return(p1);
}